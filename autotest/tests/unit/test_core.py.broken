"""
Unit tests for AutoTest core modules
"""

import pytest
from unittest.mock import Mock, patch, MagicMock
from datetime import datetime, timezone
import tempfile
import json

from autotest.core.database import Database
from autotest.core.project_manager import ProjectManager
from autotest.core.website_manager import WebsiteManager
from autotest.core.scraper import WebScraper
from autotest.core.accessibility_tester import AccessibilityTester

class TestDatabase:
    """Test cases for Database module"""
    
    @pytest.fixture
    def mock_db(self, mock_mongodb):
        """Database instance with mocked MongoDB"""
        db = Database()
        db.client = mock_mongodb['client'].return_value
        db.db = mock_mongodb['db']
        return db
    
    def test_database_initialization(self, mock_db):
        """Test database initialization"""
        assert mock_db.client is not None
        assert mock_db.db is not None
    
    def test_insert_document(self, mock_db):
        """Test document insertion"""
        test_doc = {'name': 'test', 'value': 123}
        
        # Mock successful insertion
        mock_db.db.__getitem__.return_value.insert_one.return_value = Mock(inserted_id='test_id')
        
        result = mock_db.insert('test_collection', test_doc)
        
        assert result == 'test_id'
        mock_db.db.__getitem__.assert_called_with('test_collection')
    
    def test_find_documents(self, mock_db):
        """Test document retrieval"""
        # Mock find results
        mock_docs = [
            {'_id': 'id1', 'name': 'doc1'},
            {'_id': 'id2', 'name': 'doc2'}
        ]
        mock_db.db.__getitem__.return_value.find.return_value = mock_docs
        
        results = mock_db.find('test_collection', {'name': 'test'})
        
        assert len(results) == 2
        assert results[0]['name'] == 'doc1'
        mock_db.db.__getitem__.return_value.find.assert_called_with({'name': 'test'})
    
    def test_update_document(self, mock_db):
        """Test document update"""
        # Mock successful update
        mock_db.db.__getitem__.return_value.update_one.return_value = Mock(modified_count=1)
        
        result = mock_db.update('test_collection', 'test_id', {'name': 'updated'})
        
        assert result is True
        mock_db.db.__getitem__.return_value.update_one.assert_called()
    
    def test_delete_document(self, mock_db):
        """Test document deletion"""
        # Mock successful deletion
        mock_db.db.__getitem__.return_value.delete_one.return_value = Mock(deleted_count=1)
        
        result = mock_db.delete('test_collection', 'test_id')
        
        assert result is True
        mock_db.db.__getitem__.return_value.delete_one.assert_called()

class TestProjectManager:
    """Test cases for ProjectManager"""
    
    @pytest.fixture
    def project_manager(self, mock_mongodb):
        """ProjectManager instance with mocked database"""
        with patch('autotest.core.project_manager.Database') as mock_db_class:
            mock_db = Mock()
            mock_db_class.return_value = mock_db
            
            manager = ProjectManager()
            manager.db = mock_db
            return manager, mock_db
    
    def test_create_project(self, project_manager, sample_project):
        """Test project creation"""
        manager, mock_db = project_manager
        
        # Mock successful insertion
        mock_db.insert.return_value = 'new_project_id'
        
        result = manager.create_project(
            name=sample_project.name,
            description=sample_project.description,
            created_by=sample_project.created_by,
            settings=sample_project.settings
        )
        
        assert result == 'new_project_id'
        mock_db.insert.assert_called_once()
        
        # Verify the inserted document structure
        call_args = mock_db.insert.call_args
        assert call_args[0][0] == 'projects'  # collection name
        
        inserted_doc = call_args[0][1]
        assert inserted_doc['name'] == sample_project.name
        assert inserted_doc['description'] == sample_project.description
        assert inserted_doc['created_by'] == sample_project.created_by
        assert 'created_at' in inserted_doc
        assert 'settings' in inserted_doc
    
    def test_get_project(self, project_manager):
        """Test project retrieval"""
        manager, mock_db = project_manager
        
        # Mock project data
        project_data = {
            '_id': 'test_project_id',
            'name': 'Test Project',
            'description': 'A test project',
            'created_by': 'test_user',
            'status': 'active',
            'created_at': datetime.now(timezone.utc),
            'settings': {'max_pages': 10}
        }
        mock_db.find_one.return_value = project_data
        
        project = manager.get_project('test_project_id')
        
        assert project is not None
        assert project.name == 'Test Project'
        assert project.id == 'test_project_id'
        mock_db.find_one.assert_called_with('projects', 'test_project_id')
    
    def test_list_projects(self, project_manager):
        """Test project listing"""
        manager, mock_db = project_manager
        
        # Mock projects data
        projects_data = [
            {
                '_id': 'project1',
                'name': 'Project 1',
                'created_by': 'user1',
                'status': 'active'
            },
            {
                '_id': 'project2',
                'name': 'Project 2',
                'created_by': 'user2',
                'status': 'active'
            }
        ]
        mock_db.find.return_value = projects_data
        
        projects = manager.list_projects()
        
        assert len(projects) == 2
        assert projects[0].name == 'Project 1'
        assert projects[1].name == 'Project 2'
        mock_db.find.assert_called_with('projects', {})
    
    def test_update_project(self, project_manager):
        """Test project update"""
        manager, mock_db = project_manager
        
        # Mock successful update
        mock_db.update.return_value = True
        
        result = manager.update_project('test_project_id', {
            'name': 'Updated Project',
            'description': 'Updated description'
        })
        
        assert result is True
        mock_db.update.assert_called_once()
        
        # Verify update data includes updated_at
        call_args = mock_db.update.call_args
        update_data = call_args[0][2]
        assert update_data['name'] == 'Updated Project'
        assert 'updated_at' in update_data
    
    def test_delete_project(self, project_manager):
        """Test project deletion"""
        manager, mock_db = project_manager
        
        # Mock successful deletion
        mock_db.delete.return_value = True
        
        result = manager.delete_project('test_project_id')
        
        assert result is True
        mock_db.delete.assert_called_with('projects', 'test_project_id')

class TestWebsiteManager:
    """Test cases for WebsiteManager"""
    
    @pytest.fixture
    def website_manager(self, mock_mongodb):
        """WebsiteManager instance with mocked database"""
        with patch('autotest.core.website_manager.Database') as mock_db_class:
            mock_db = Mock()
            mock_db_class.return_value = mock_db
            
            manager = WebsiteManager()
            manager.db = mock_db
            return manager, mock_db
    
    def test_add_website(self, website_manager):
        """Test website addition"""
        manager, mock_db = website_manager
        
        # Mock successful insertion
        mock_db.insert.return_value = 'new_website_id'
        
        result = manager.add_website(
            project_id='test_project_id',
            url='https://example.com',
            name='Example Website',
            settings={'max_pages': 20}
        )
        
        assert result == 'new_website_id'
        mock_db.insert.assert_called_once()
        
        # Verify the inserted document
        call_args = mock_db.insert.call_args
        inserted_doc = call_args[0][1]
        assert inserted_doc['project_id'] == 'test_project_id'
        assert inserted_doc['url'] == 'https://example.com'
        assert inserted_doc['name'] == 'Example Website'
        assert 'added_at' in inserted_doc
    
    def test_get_websites_for_project(self, website_manager):
        """Test retrieving websites for a project"""
        manager, mock_db = website_manager
        
        # Mock websites data
        websites_data = [
            {
                '_id': 'website1',
                'project_id': 'test_project_id',
                'url': 'https://example1.com',
                'name': 'Example 1'
            },
            {
                '_id': 'website2',
                'project_id': 'test_project_id',
                'url': 'https://example2.com',
                'name': 'Example 2'
            }
        ]
        mock_db.find.return_value = websites_data
        
        websites = manager.get_websites_for_project('test_project_id')
        
        assert len(websites) == 2
        assert websites[0]['url'] == 'https://example1.com'
        mock_db.find.assert_called_with('websites', {'project_id': 'test_project_id'})
    
    def test_validate_url(self, website_manager):
        """Test URL validation"""
        manager, _ = website_manager
        
        # Valid URLs
        assert manager.validate_url('https://example.com') is True
        assert manager.validate_url('http://example.com') is True
        assert manager.validate_url('https://subdomain.example.com/path') is True
        
        # Invalid URLs
        assert manager.validate_url('') is False
        assert manager.validate_url('not-a-url') is False
        assert manager.validate_url('ftp://example.com') is False
        assert manager.validate_url('https://') is False

class TestWebScraper:
    """Test cases for WebScraper"""
    
    @pytest.fixture
    def web_scraper(self, mock_selenium):
        """WebScraper instance with mocked Selenium"""
        scraper = WebScraper()
        scraper.driver = mock_selenium
        return scraper
    
    def test_scraper_initialization(self, web_scraper):
        """Test scraper initialization"""
        assert web_scraper.driver is not None
        assert web_scraper.max_pages == 100
        assert web_scraper.max_depth == 3
        assert web_scraper.delay == 1.0
    
    def test_extract_page_info(self, web_scraper, sample_html_content):
        """Test page information extraction"""
        # Mock page source and title
        web_scraper.driver.page_source = sample_html_content
        web_scraper.driver.title = "Test Page"
        web_scraper.driver.current_url = "https://example.com/test"
        
        page_info = web_scraper.extract_page_info()
        
        assert page_info['url'] == "https://example.com/test"
        assert page_info['title'] == "Test Page"
        assert 'content' in page_info
        assert 'metadata' in page_info
    
    def test_extract_links(self, web_scraper):
        """Test link extraction"""
        # Mock link elements
        mock_links = [
            Mock(get_attribute=lambda attr: 'https://example.com/page1' if attr == 'href' else 'Page 1'),
            Mock(get_attribute=lambda attr: 'https://example.com/page2' if attr == 'href' else 'Page 2'),
            Mock(get_attribute=lambda attr: 'mailto:test@example.com' if attr == 'href' else 'Email'),
            Mock(get_attribute=lambda attr: '/relative-link' if attr == 'href' else 'Relative')
        ]
        
        web_scraper.driver.find_elements.return_value = mock_links
        
        links = web_scraper.extract_links('https://example.com')
        
        # Should filter out mailto and convert relative links
        assert len(links) >= 2
        assert 'https://example.com/page1' in links
        assert 'https://example.com/page2' in links
    
    def test_is_valid_url(self, web_scraper):
        """Test URL validation"""
        assert web_scraper.is_valid_url('https://example.com') is True
        assert web_scraper.is_valid_url('http://example.com') is True
        assert web_scraper.is_valid_url('') is False
        assert web_scraper.is_valid_url('mailto:test@example.com') is False
        assert web_scraper.is_valid_url('#anchor') is False
        assert web_scraper.is_valid_url('javascript:void(0)') is False
    
    @patch('time.sleep')
    def test_crawl_website(self, mock_sleep, web_scraper):
        """Test website crawling"""
        # Mock successful page load
        web_scraper.driver.page_source = "<html><body><h1>Test</h1></body></html>"
        web_scraper.driver.title = "Test Page"
        web_scraper.driver.current_url = "https://example.com"
        
        # Mock no additional links found
        web_scraper.driver.find_elements.return_value = []
        
        with patch.object(web_scraper, 'save_page_to_db') as mock_save:
            mock_save.return_value = 'page_id'
            
            result = web_scraper.crawl_website(
                'https://example.com',
                'test_project_id',
                max_pages=1
            )
            
            assert result is not None
            assert 'pages_crawled' in result
            assert result['pages_crawled'] >= 1
            mock_save.assert_called()

class TestAccessibilityTester:
    """Test cases for AccessibilityTester"""
    
    @pytest.fixture
    def accessibility_tester(self, mock_selenium):
        """AccessibilityTester instance with mocked Selenium"""
        with patch('autotest.core.accessibility_tester.Database') as mock_db_class:
            mock_db = Mock()
            mock_db_class.return_value = mock_db
            
            tester = AccessibilityTester()
            tester.driver = mock_selenium
            tester.db = mock_db
            return tester, mock_db
    
    def test_tester_initialization(self, accessibility_tester):
        """Test accessibility tester initialization"""
        tester, _ = accessibility_tester
        assert tester.driver is not None
        assert tester.db is not None
        assert hasattr(tester, 'rules')
    
    def test_load_page(self, accessibility_tester, sample_html_content):
        """Test page loading"""
        tester, _ = accessibility_tester
        
        # Mock successful page load
        tester.driver.page_source = sample_html_content
        tester.driver.title = "Test Page"
        
        result = tester.load_page('https://example.com/test')
        
        assert result is True
        tester.driver.get.assert_called_with('https://example.com/test')
    
    def test_run_accessibility_tests(self, accessibility_tester, sample_html_content):
        """Test accessibility test execution"""
        tester, mock_db = accessibility_tester
        
        # Mock page content
        tester.driver.page_source = sample_html_content
        
        with patch.object(tester, 'check_color_contrast') as mock_contrast, \
             patch.object(tester, 'check_alt_text') as mock_alt, \
             patch.object(tester, 'check_heading_structure') as mock_headings:
            
            # Mock rule results
            mock_contrast.return_value = [{'rule_id': 'color_contrast', 'severity': 'serious'}]
            mock_alt.return_value = [{'rule_id': 'alt_text', 'severity': 'minor'}]
            mock_headings.return_value = []
            
            violations = tester.run_accessibility_tests('https://example.com/test')
            
            assert len(violations) == 2
            assert violations[0]['rule_id'] == 'color_contrast'
            assert violations[1]['rule_id'] == 'alt_text'
    
    def test_calculate_score(self, accessibility_tester):
        """Test accessibility score calculation"""
        tester, _ = accessibility_tester
        
        # Test with no violations
        score = tester.calculate_score([])
        assert score == 100
        
        # Test with violations of different severities
        violations = [
            {'severity': 'critical'},
            {'severity': 'serious'},
            {'severity': 'moderate'},
            {'severity': 'minor'}
        ]
        
        score = tester.calculate_score(violations)
        assert 0 <= score <= 100
        assert score < 100  # Should be reduced due to violations
    
    def test_generate_test_result(self, accessibility_tester):
        """Test test result generation"""
        tester, mock_db = accessibility_tester
        
        violations = [
            {'rule_id': 'color_contrast', 'severity': 'serious'},
            {'rule_id': 'alt_text', 'severity': 'minor'}
        ]
        
        # Mock successful database insert
        mock_db.insert.return_value = 'test_result_id'
        
        result = tester.generate_test_result(
            page_id='test_page_id',
            project_id='test_project_id',
            violations=violations,
            wcag_level='AA'
        )
        
        assert result == 'test_result_id'
        mock_db.insert.assert_called_once()
        
        # Verify the test result structure
        call_args = mock_db.insert.call_args
        result_doc = call_args[0][1]
        assert result_doc['page_id'] == 'test_page_id'
        assert result_doc['project_id'] == 'test_project_id'
        assert len(result_doc['violations']) == 2
        assert 'score' in result_doc
        assert 'test_date' in result_doc

if __name__ == '__main__':
    pytest.main([__file__])